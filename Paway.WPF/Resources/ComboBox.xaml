<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:Paway.WPF">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Paway.WPF;component\Resources\Default.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <local:NoBottomRadiusConverter x:Key="noBottomRadiusConverter"/>
    <local:NoLeftThicknessConverter x:Key="noLeftThicknessConverter"/>

    <LinearGradientBrush x:Key="backLine" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="{Binding Source={StaticResource ThemeBackgroundSub}, Converter={StaticResource brushToColorConverter}}" Offset="0"/>
        <GradientStop Color="#FFE5E5E5" Offset="1"/>
    </LinearGradientBrush>
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Border Background="Transparent" Opacity="0" Cursor="Hand"/>
            <Path x:Name="Arrow" Margin="9,0"
                  Style="{StaticResource PathTriangleDown}" Width="12" Height="6"
                  HorizontalAlignment="Right" StrokeThickness="0"
                  Opacity="0.35"
                  Stretch="Fill" Fill="{StaticResource ThemeForeground}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="Arrow" Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform   CenterX="6" CenterY="3" Angle="180"></RotateTransform>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxToggleNone" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Border Background="Transparent" Opacity="0" Cursor="Hand"/>
        </Grid>
    </ControlTemplate>

    <Style TargetType="{x:Type local:ComboBoxEXT}" BasedOn="{StaticResource ComboConfig}">
        <Setter Property="Padding" Value="5"/>
        <!--<Setter Property="Background" Value="{StaticResource backLine}"/>-->
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ComboBoxEXT}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding TitleMinWidth}"/>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="1*"/>
                            <ColumnDefinition Width="24"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock x:Name="tbTitle" Visibility="{Binding Title, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource nullToCollapsed}}"
                                   IsHitTestVisible="False"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   HorizontalAlignment="Right"
                                   Padding="0,0,6,0"
                                   FontSize="{TemplateBinding FontSize}"
                                   Opacity="0.8"
                                   Text="{TemplateBinding Title}"/>
                        <Border Name="border" Grid.Column="1" Grid.ColumnSpan="3" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                CornerRadius="{TemplateBinding Radius}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{Binding Path=ItemBrush.Normal.Result, RelativeSource={RelativeSource TemplatedParent}}" />
                        <Image x:Name="icon" Grid.Column="1" Visibility="Collapsed" Margin="1,0"
                                       Source="{TemplateBinding Icon}"
                                       Width="{TemplateBinding IconWidth}" 
                                       Height="{TemplateBinding IconHeight}"
                                       Stretch="{TemplateBinding IconStretch}"/>
                        <ContentPresenter x:Name="ContentSite" Grid.Column="2"
                                          Margin="{TemplateBinding Padding}"
                                          IsHitTestVisible="False"
                                          Content="{TemplateBinding SelectionBoxItem}" 
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <!--ToggleButton 已数据绑定到 ComboBox 本身以切换 IsDropDownOpen-->
                        <ToggleButton x:Name="ToggleButton" Grid.Column="1" Grid.ColumnSpan="3" 
                                      Focusable="false" 
                                      ClickMode="Press"
                                      Template="{StaticResource ComboBoxToggleButton}"
                                      IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" />
                        <!--必须将 TextBox 命名为 PART_EditableTextBox，否则 ComboBox 将无法识别它-->
                        <local:TextBoxEXT x:Name="PART_EditableTextBox"
                                          Margin="-1,0,0,0" BorderThickness="0"
                                          FontSize="{TemplateBinding FontSize}"
                                          Padding="{TemplateBinding Padding}"
                                          Grid.Column="2"
                                          Visibility="Hidden" 
                                          Background="Transparent" 
                                          Radius="{TemplateBinding Radius}"
                                          Water="{TemplateBinding Water}"
                                          WaterSize="{TemplateBinding WaterSize}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Grid Name="grid" Grid.Column="1" Grid.ColumnSpan="3" VerticalAlignment="Bottom" Visibility="Collapsed">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Line x:Name="line11" 
                                  StrokeThickness="{Binding Animation, RelativeSource={RelativeSource TemplatedParent}}" 
                                  Stroke="{Binding Path=ItemBrush.Pressed, RelativeSource={RelativeSource TemplatedParent}}" FlowDirection="RightToLeft">
                            </Line>
                            <Line x:Name="line12" Grid.Column="1"
                                  StrokeThickness="{Binding Animation, RelativeSource={RelativeSource TemplatedParent}}"
                                  Stroke="{Binding Path=ItemBrush.Pressed, RelativeSource={RelativeSource TemplatedParent}}">
                            </Line>
                        </Grid>
                        <!--Popup 可显示 ComboBox 中的项列表。IsOpen 已数据绑定到通过 ComboBoxToggleButton 来切换的 IsDropDownOpen-->
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True" 
                               IsOpen="{TemplateBinding IsDropDownOpen}" 
                               Placement="Bottom" 
                               PlacementTarget="{Binding ElementName=border}"
                               PopupAnimation="Slide">
                            <Grid MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}" 
                                  MinWidth="{Binding ActualWidth, ElementName=border}" x:Name="DropDown" 
                                  Background="{StaticResource ThemeBackgroundSub}">
                                <Border x:Name="DropDownBorder" BorderBrush="{Binding Path=ItemBrush.Pressed, RelativeSource={RelativeSource TemplatedParent}}" 
                                        BorderThickness="1" Padding="0"/>
                                <Line X1="1.5" X2="{Binding ActualWidth, ElementName=border, Converter={StaticResource valueAddConverter}, ConverterParameter=-1.5}" 
                                      Y1="1" Y2="1" StrokeThickness="2" Stroke="Transparent" RenderOptions.EdgeMode="Aliased" />
                                <ScrollViewer CanContentScroll="True"
                                              HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                              VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                    <!--StackPanel 用于显示子级，方法是将 IsItemsHost 设置为 True-->
                                    <StackPanel IsItemsHost="True"
                                                KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ToggleButton" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="ContentSite" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource ThemeBackgroundHigh}"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                            <!--<Setter TargetName="border" Property="Background" Value="Transparent" />-->
                        </Trigger>
                        <DataTrigger Binding="{Binding Icon, Converter={StaticResource isNotNull}, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="icon" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Margin" Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource noLeftThicknessConverter}}" />
                            <Setter TargetName="PART_EditableTextBox" Property="Padding" Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource noLeftThicknessConverter}}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" 
                                    Value="{Binding Path=ItemBrush.Pressed, RelativeSource={RelativeSource TemplatedParent}}" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" 
                                    Value="{Binding Path=ItemBrush.Mouse, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Panel.ZIndex" Value="{x:Static sys:Int32.MaxValue}" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" 
                                    Value="{Binding Path=ItemBrush.Pressed, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="border" Property="BorderThickness" Value="1,1,1,0" />
                            <Setter TargetName="border" Property="CornerRadius" 
                                    Value="{Binding Radius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource noBottomRadiusConverter}}" />
                            <Setter Property="Panel.ZIndex" Value="{x:Static sys:Int32.MaxValue}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Animation, Converter={StaticResource isNotNull}, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="grid" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDropDownOpen" Value="False" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="BorderBrush" 
                                    Value="{Binding Path=ItemBrush.Mouse, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ComboBoxItem">
                    <Setter Property="Padding" Value="{Binding Padding, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEXT}}}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate  TargetType="{x:Type ComboBoxItem}">
                                <Grid Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                                    <Border x:Name="_borderbg" Background="Transparent" Padding="{TemplateBinding Padding}" >
                                        <ContentPresenter x:Name="_txt" Margin="5 0"
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsSelected" Value="true">
                                        <Setter TargetName="_borderbg" Property="Background" 
                                                Value="{Binding Path=ItemBackground.Pressed, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEXT}}}" />
                                        <Setter TargetName="_txt" Property="TextBlock.Foreground" 
                                                Value="{Binding Path=ItemForeground.Pressed, RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEXT}}}"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter TargetName="_borderbg" Property="Background" 
                                                Value="{Binding Path=ItemBackground.Mouse,RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEXT}}}" />
                                        <Setter TargetName="_txt" Property="TextBlock.Foreground" 
                                                Value="{Binding Path=ItemForeground.Mouse,RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEXT}}}"/>
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsSelected" Value="true"/>
                                            <Condition Property="IsMouseOver" Value="true"/>
                                        </MultiTrigger.Conditions>
                                        <Setter TargetName="_borderbg" Property="Background" 
                                                Value="{Binding Path=ItemBackground.PressedMouse,RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEXT}}}" />
                                        <Setter TargetName="_txt" Property="TextBlock.Foreground" 
                                                Value="{Binding Path=ItemForeground.Pressed,RelativeSource={RelativeSource AncestorType={x:Type local:ComboBoxEXT}}}"/>
                                    </MultiTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>